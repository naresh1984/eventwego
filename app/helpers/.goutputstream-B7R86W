  module CalendarHelper

    # Returns an HTML calendar which can show multiple, overlapping events across calendar days and rows.
    # Customize using CSS, the below options, and by passing in a code block.
    #
    # The following are optional, available for customizing the default behaviour:
    # :month => Time.now.month # The month to show the calendar for. Defaults to current month.
    # :year => Time.now.year # The year to show the calendar for. Defaults to current year.
    # :dates => (start_date .. end_date) # Show specific range of days. Defaults to :year, :month.
    # :abbrev => true # Abbreviate day names. Reads from the abbr_day_names key in the localization file.
    # :first_day_of_week => 0 # Renders calendar starting on Sunday. Use 1 for Monday, and so on.
    # :show_today => true # Highlights today on the calendar using CSS class.
    # :show_header => true # Show the calendar's header. (month name, next, & previous links)
    # :month_name_text => nil # Displayed center in header row.
    #     Defaults to current month name from Date::MONTHNAMES hash.
    # :previous_month_text => nil # Displayed left of the month name if set
    # :next_month_text => nil # Displayed right of the month name if set
    # :event_strips => [] # An array of arrays, encapsulating the event rows on the calendar
    #
    # :width => nil # Width of the calendar, if none is set then it will stretch the container's width
    # :height => 500 # Approx minimum total height of the calendar (excluding the header).
    #     Height could get added if a day has too many event's to fit.
    # :day_names_height => 18 # Height of the day names table (included in the above 'height' option)
    # :day_nums_height => 18 # Height of the day numbers tables (included in the 'height' option)
    # :event_height => 18 # Height of an individual event row
    # :event_margin => 1 # Spacing of the event rows
    # :event_padding_top => 1 # Padding on the top of the event rows (increase to move text down)
    #
    # :use_all_day => false # If set to true, will check for an 'all_day' boolean field when displaying an event.
    #     If it is an all day event, or the event is multiple days, then it will display as usual.
    #     Otherwise it will display without a background color bar.
    # :use_javascript => true # Outputs HTML with inline javascript so events spanning multiple days will be highlighted.
    #     If this option is false, cleaner HTML will be output, but events spanning multiple days will
    #     not be highlighted correctly on hover, so it is only really useful if you know your calendar
    #     will only have single-day events. Defaults to true.
    # :link_to_day_action => false # If controller action is passed,
    #     the day number will be a link. Override the day_link method for greater customization.
    #
    # For more customization, you can pass a code block to this method
    # The varibles you have to work with in this block are passed in an agruments hash:
    # :event => The event to be displayed.
    # :day => The day the event is displayed on. Usually the first day of the event, or the first day of the week,
    #   if the event spans a calendar row.
    # :options => All the calendar options in use. (User defined and defaults merged.)
    #
    # For example usage, see README.
    #
 def pre_link(month_date)
 @y=month_date.year

link_to_if(2013 <=@y, image_tag('leftArrow.gif'), { :month => month_date.month, :year => month_date.year },:remote=>'true') do
 end

  end
 def next_link(month_date)
    @event_end=Event.select('end_at').where("status='1'").order('end_at DESC').limit(1)     
    @event_end=@event_end[0].end_at.strftime("%Y").to_i  
    @y=month_date.year
    
link_to_if(@y <= @event_end , image_tag('rightArrow.gif'), { :month => month_date.month, :year => month_date.year },:remote=>'true') do
 end
end
def ms
d = Date.today  
  content_tag(:span,select_tag(:month, options_for_select((1..12).map {|m| [Date::MONTHNAMES[m], m]}, params[:month] || d.strftime("%m")),:style=>'width:105px;outline:none;padding:0px;height: 22px;margin-left:47px;'))

end

def ys
d = Date.today  
    #@event_start=Event.select('start_at').where("status='1'").order('start_at ASC').limit(1)  
    @event_end=Event.select('end_at').where("status='1'").order('end_at DESC').limit(1)     
    @event_end=@event_end[0].end_at.strftime("%Y").to_i
    #raise @event_start.inspect
  content_tag :span, :style=>'margin-left:5px;' do  select_tag(:year, options_for_select((2013..@event_end).map {|m| [m, m]},params[:year] ||d.strftime("%Y")),:style=>'width:75px;outline:none;padding:0px;height: 22px;')

 end
  

end
def yss
content_tag :span, :style=>'margin-left:5px;' do  submit_tag "Go", :class => "button" ,:style=>"height:21px;font-size: 11px;position: absolute;"  end
end


    def calendar(options = {}, &block)
      block ||= Proc.new {|d| nil}

      defaults = {
        :year =>  @year,
        :month => @month,
        :abbrev => true,
        :first_day_of_week => @first_day_of_week ,
        :show_today => true,
        :show_header => true,
        :month_name_text => I18n.localize(@shown_month, :format => "%B %Y"),
        :previous_month_text => pre_link(@shown_month.prev_month),
        :next_month_text => next_link(@shown_month.next_month),
        :event_strips =>@event_strips,

        # it would be nice to have these in the CSS file
        # but they are needed to perform height calculations
        :width => nil,
        :height => 500,
        :day_names_height => 18,
        :day_nums_height => 18,
        :event_height => 18,
        :event_margin => 1,
        :event_padding_top => 2,
        :event_padding_left => 6,
        :events_padding_right => 2,

        :use_all_day => false,
        :use_javascript => false,
        :link_to_day_action => false
      }
      options = defaults.merge options

      # default month name for the given number
      if options[:show_header]
        options[:month_name_text] ||= I18n.translate(:'date.month_names')[options[:month]]
      end

      # make the height calculations
      # tricky since multiple events in a day could force an increase in the set height
      height = options[:day_names_height]
      row_heights = cal_row_heights(options)
      row_heights.each do |row_height|
        height += row_height
      end

      # the first and last days of this calendar month
      if options[:dates].is_a?(Range)
        first = options[:dates].begin
        last = options[:dates].end
      else
        first = Date.civil(options[:year], options[:month], 1)
        last = Date.civil(options[:year], options[:month], -1)
      end

      # create the day names array [Sunday, Monday, etc...]
      day_names = []
      if options[:abbrev]
        day_names.concat(I18n.translate(:'date.abbr_day_names'))
      else
        day_names.concat(I18n.translate(:'date.day_names'))
      end
      options[:first_day_of_week].times do
        day_names.push(day_names.shift)
      end


      # Build the HTML string
      cal = ""
      my = ""
      #ms = ""
      d = Date.today 


      # outer calendar container
      cal << %(<div class="ec-calendar")
      cal << %(style="width: #{options[:width]}px;") if options[:width]
      cal << %(>)

      # table header, including the monthname and links to prev & next month
      if options[:show_header]
        cal << %(<table class="ec-calendar-header" cellpadding="0" cellspacing="0">)
        cal << %(<thead><tr>)
        if options[:previous_month_text] or options[:next_month_text]
          cal << %(<th colspan="2" class="ec-month-nav ec-previous-month">
          #{options[:previous_month_text]} #{options[:next_month_text]} <span class='date_header'>#{options[:month_name_text]}</span></th>)
          colspan = 3
        else
          colspan = 6
        end
        cal << %(<th colspan="#{colspan}" class="ec-month-name"></th>)






       
          cal << %(<th colspan="3" class="ec-month-nav ec-next-month">)

cal << (form_for  calendar_path , :method => :get ,:remote=>"true" do 

my << (ms)
my << (ys)
my << (yss)
raw(my)
end )



cal << %(</th>)
   